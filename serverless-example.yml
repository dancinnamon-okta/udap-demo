#This is the config file for the Okta reference implementation of UDAP.

service: okta-udap-reference

plugins:
  - serverless-certificate-creator
  - serverless-domain-manager

params:
  default:
    #The domain name you want publicly as the base domain name.
    BASE_DOMAIN: your.domain.tld

    #Route53 hosted domain (include the period at the end)
    BASE_TLD: domain.tld.

    #Allows us to set these paths because the backend authz server can have different token/authorize paths.
    TOKEN_PATH: /oauth2/yourauthzserverid/v1/token
    AUTHORIZE_PATH: /oauth2/yourauthzserverid/v1/authorize

    #The hostname used for vanity URLs on the backend authz server.
    OKTA_ORG_VANITY_URL_HOSTNAME: youroktatenantsubdomain.customdomains.oktapreview.com

    #Okta Org settings for calling the management endpoint.
    OKTA_ORG: youroktatenantsubdomain.oktapreview.com
    OKTA_CLIENT_ID: client_id_for_okta_m2m_app_for_management_api
    OKTA_PRIVATE_KEY_FILE: ./private_key_jwks_file_from_app_in_okta
    OKTA_CLIENT_TOKEN_ENDPOINT: https://youroktatenantsubdomain.oktapreview.com/oauth2/v1/token

    #Certificate to use to determine the trust community.
    COMMUNITY_CERT: ./ca.crt
    SERVER_KEY: ./server.p12
    SERVER_KEY_PWD: your_p12_password

    KEY_MAPPING_TABLE_NAME: 'udap_tiered_oauth_idp_mapping'

    #The backend domain name for the api gateway deployment.
    API_GATEWAY_DOMAIN_NAME_BACKEND: api_gateway_custom_domain_backend_url

##YOU SHOULD NOT NEED TO TOUCH ANYTHING BELOW THIS LINE
provider:
  name: aws
  runtime: nodejs12.x
  stage: sandbox
  region: us-east-1

  logs:
    restApi: true

  environment:
    BASE_DOMAIN: ${param:BASE_DOMAIN}
    EXTERNAL_TOKEN_ENDPOINT: https://${param:BASE_DOMAIN}${param:TOKEN_PATH}
    OKTA_ORG_VANITY_URL_TOKEN_ENDPOINT: https://${param:OKTA_ORG_VANITY_URL_HOSTNAME}${param:TOKEN_PATH}
    OKTA_ORG_VANITY_URL_AUTHORIZE_ENDPOINT: https://${param:OKTA_ORG_VANITY_URL_HOSTNAME}${param:AUTHORIZE_PATH}

    TEMPLATE_OKTA_IDP_ID: ${param:TEMPLATE_OKTA_IDP_ID}
    TEMPLATE_OKTA_IDP_KID: ${param:TEMPLATE_OKTA_IDP_KID}

    OKTA_ORG: ${param:OKTA_ORG}
    OKTA_CLIENT_ID: ${param:OKTA_CLIENT_ID}
    OKTA_PRIVATE_KEY_FILE: ${param:OKTA_PRIVATE_KEY_FILE}
    OKTA_CLIENT_TOKEN_ENDPOINT: ${param:OKTA_CLIENT_TOKEN_ENDPOINT}

    COMMUNITY_CERT: ${param:COMMUNITY_CERT}

    SERVER_KEY: ${param:SERVER_KEY}
    SERVER_KEY_PWD: ${param:SERVER_KEY_PWD}

    KEY_MAPPING_TABLE_NAME: ${param:KEY_MAPPING_TABLE_NAME}

#Provide additional access to allow read/write to our refresh token cache
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource:
        Fn::GetAtt:
          - keyMappingTable
          - Arn

#Lambda functions
functions:

##TOKEN ENDPOINT THAT VALIDATES INBOUND JWTs AGAINST THE TRUST COMMUNITIES
  token-proxy:
    handler: ${self:provider.name}/token.tokenHandler
    events:
      - http:
          path: ${param:TOKEN_PATH}
          method: POST
          cors: true

##OUTBOUND TOKEN ENDPOINT THAT PERFORMS UDAP SPECIFIC STUFF IN THE FINAL /TOKEN REQUEST.
  tiered-token-client:
    handler: ${self:provider.name}/tiered_token_client.tieredTokenClientHandler
    events:
      - http:
          path: /{idpId}/tiered_client/token
          method: POST
          cors: true

##DCR Proxy
  tdcr_udap:
    handler: ${self:provider.name}/tdcr_udap.clientRegistrationHandler
    events:
      - http:
          path: /register
          method: POST

##AUTHORIZE PROXY THAT PERFORMS TIERED-OAUTH2
  authorize-proxy:
    handler: ${self:provider.name}/authorize.authorizeHandler
    timeout: 20
    events:
      - http:
          path: ${param:AUTHORIZE_PATH}
          method: GET


custom:
  customCertificate:
    certificateName: ${param:BASE_DOMAIN}
    hostedZoneNames: ${param:BASE_TLD}
    subjectAlternativeNames:
      - ${param:BASE_DOMAIN}

  customDomain:
    domainName: ${param:BASE_DOMAIN}
    certificateName: ${param:BASE_DOMAIN}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: false
    endpointType: regional

resources:
  Resources:
    authzServiceCFDistribution:
      Type: "AWS::CloudFront::Distribution"
      Properties:
        DistributionConfig:
          Aliases:
          - ${param:BASE_DOMAIN}
          Origins:
          - #THIS ONE IS THE API GATEWAY
            ConnectionAttempts: 3
            ConnectionTimeout: 10
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginKeepaliveTimeout: 5
              OriginProtocolPolicy: "https-only"
              OriginReadTimeout: 30
              OriginSSLProtocols:
              - "TLSv1.2"
            DomainName: ${param:API_GATEWAY_DOMAIN_NAME_BACKEND} #JUST HAVE THE USER INPUT THIS.  #${cf:auth0-deploytest-smart-service-stg.DistributionDomainName} ##THIS NEEDS TO BE THE OUTPUT OF THE CUSTOM DOMAIN THING.
            Id: ${param:API_GATEWAY_DOMAIN_NAME_BACKEND} ##THIS NEEDS TO BE THE OUTPUT OF THE CUSTOM DOMAIN THING.
            OriginPath: ""
          - #THIS ONE IS THE AUTHZ SERVER
            ConnectionAttempts: 3
            ConnectionTimeout: 10
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginKeepaliveTimeout: 5
              OriginProtocolPolicy: "https-only"
              OriginReadTimeout: 30
              OriginSSLProtocols:
              - "TLSv1.2"
            DomainName: ${param:OKTA_ORG_VANITY_URL_HOSTNAME}
            Id: ${param:OKTA_ORG_VANITY_URL_HOSTNAME}
            OriginPath: ""
          DefaultCacheBehavior:
            AllowedMethods:
            - "HEAD"
            - "DELETE"
            - "POST"
            - "GET"
            - "OPTIONS"
            - "PUT"
            - "PATCH"
            Compress: false
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
            OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
            SmoothStreaming: false
            TargetOriginId: ${param:OKTA_ORG_VANITY_URL_HOSTNAME} ##THIS NEEDS TO BE THE OUTPUT OF THE CUSTOM DOMAIN THING.
            ViewerProtocolPolicy: "https-only"
          CacheBehaviors:
          -
            AllowedMethods:
            - "HEAD"
            - "DELETE"
            - "POST"
            - "GET"
            - "OPTIONS"
            - "PUT"
            - "PATCH"
            Compress: false
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
            OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
            PathPattern: ${param:TOKEN_PATH}
            SmoothStreaming: false
            TargetOriginId: ${param:API_GATEWAY_DOMAIN_NAME_BACKEND} ##THIS NEEDS TO BE THE OUTPUT OF THE CUSTOM DOMAIN THING.
            ViewerProtocolPolicy: "https-only"
          -
            AllowedMethods:
            - "HEAD"
            - "DELETE"
            - "POST"
            - "GET"
            - "OPTIONS"
            - "PUT"
            - "PATCH"
            Compress: false
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
            OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
            PathPattern: ${param:AUTHORIZE_PATH}
            SmoothStreaming: false
            TargetOriginId: ${param:API_GATEWAY_DOMAIN_NAME_BACKEND} ##THIS NEEDS TO BE THE OUTPUT OF THE CUSTOM DOMAIN THING.
            ViewerProtocolPolicy: "https-only"
          -
            AllowedMethods:
            - "HEAD"
            - "DELETE"
            - "POST"
            - "GET"
            - "OPTIONS"
            - "PUT"
            - "PATCH"
            Compress: false
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
            OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
            PathPattern: /register
            SmoothStreaming: false
            TargetOriginId: ${param:API_GATEWAY_DOMAIN_NAME_BACKEND} ##THIS NEEDS TO BE THE OUTPUT OF THE CUSTOM DOMAIN THING.
            ViewerProtocolPolicy: "https-only"
          -
            AllowedMethods:
            - "HEAD"
            - "DELETE"
            - "POST"
            - "GET"
            - "OPTIONS"
            - "PUT"
            - "PATCH"
            Compress: false
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
            OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
            PathPattern: /*/tiered_client/token
            SmoothStreaming: false
            TargetOriginId: ${param:API_GATEWAY_DOMAIN_NAME_BACKEND} ##THIS NEEDS TO BE THE OUTPUT OF THE CUSTOM DOMAIN THING.
            ViewerProtocolPolicy: "https-only"
          Comment: ""
          PriceClass: "PriceClass_All"
          Enabled: true
          ViewerCertificate:
            AcmCertificateArn: ${certificate(${self:custom.customCertificate.certificateName}):CertificateArn}
            MinimumProtocolVersion: "TLSv1.2_2021"
            SslSupportMethod: "sni-only"
          Restrictions:
            GeoRestriction:
              RestrictionType: "none"
          HttpVersion: "http2"
          DefaultRootObject: ""
          IPV6Enabled: false

    keyMappingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName:  ${param:KEY_MAPPING_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: idp_id
            AttributeType: S
        KeySchema:
          - AttributeName: idp_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
